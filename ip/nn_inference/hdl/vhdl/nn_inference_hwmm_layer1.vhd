-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nn_inference_hwmm_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of nn_inference_hwmm_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_layer1_weights_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal weights_layer1_weights_V_ce0 : STD_LOGIC;
    signal weights_layer1_weights_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal weights_layer1_weights_V_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal weights_layer1_weights_V_ce1 : STD_LOGIC;
    signal weights_layer1_weights_V_q1 : STD_LOGIC_VECTOR (24 downto 0);
    signal k_reg_267 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_V_17_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_reg_291 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_V_18_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_3_reg_315 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_V_19_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_4_reg_339 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_V_20_reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_363_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln21_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_937 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_1_fu_375_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln21_1_reg_942 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln21_fu_379_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln21_reg_947 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln25_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln25_reg_954_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_fu_389_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal or_ln25_fu_423_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln25_reg_973 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_103_fu_437_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_103_reg_979 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal or_ln21_fu_525_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln21_reg_999 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln25_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_reg_1005 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln25_1_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_1_reg_1010 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln25_1_reg_1010_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_1_fu_540_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal or_ln25_1_fu_563_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln25_1_reg_1029 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_107_fu_577_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_107_reg_1035 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal or_ln21_1_fu_659_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln21_1_reg_1055 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln25_1_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_1_reg_1061 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln25_2_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_2_reg_1066 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state11_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln25_2_reg_1066_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_2_fu_674_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal or_ln25_2_fu_697_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln25_2_reg_1085 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_111_fu_711_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_111_reg_1091 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal or_ln21_2_fu_793_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln21_2_reg_1111 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln25_2_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_2_reg_1117 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln25_3_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_3_reg_1122 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state15_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln25_3_reg_1122_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_3_fu_808_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal or_ln25_3_fu_831_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln25_3_reg_1141 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_115_fu_845_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_115_reg_1147 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal add_ln21_fu_927_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_condition_pp3_exit_iter1_state16 : STD_LOGIC;
    signal j_reg_255 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln1118_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_cast3_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_4_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_5_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal k_2_cast4_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_6_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_7_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal k_3_cast5_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_8_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_2_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_9_fu_826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_4_cast6_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_10_fu_861_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_3_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_400_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_72_fu_410_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_73_fu_447_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1118_fu_454_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_80_fu_464_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_fu_472_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_74_fu_491_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_81_fu_501_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_105_fu_485_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_79_fu_509_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_75_fu_551_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_76_fu_587_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_83_fu_598_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_80_fu_606_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_77_fu_625_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_84_fu_635_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_109_fu_619_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_81_fu_643_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_78_fu_685_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_79_fu_721_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_86_fu_732_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_82_fu_740_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_80_fu_759_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_87_fu_769_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_113_fu_753_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_83_fu_777_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_81_fu_819_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_82_fu_855_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_89_fu_866_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_84_fu_874_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_83_fu_893_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_90_fu_903_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_117_fu_887_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_85_fu_911_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nn_inference_mul_25s_32s_56_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component nn_inference_hwmm_layer1_weights_layer1_weights_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    weights_layer1_weights_V_U : component nn_inference_hwmm_layer1_weights_layer1_weights_V
    generic map (
        DataWidth => 25,
        AddressRange => 24576,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_layer1_weights_V_address0,
        ce0 => weights_layer1_weights_V_ce0,
        q0 => weights_layer1_weights_V_q0,
        address1 => weights_layer1_weights_V_address1,
        ce1 => weights_layer1_weights_V_ce1,
        q1 => weights_layer1_weights_V_q1);

    mul_25s_32s_56_1_1_U1 : component nn_inference_mul_25s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => weights_layer1_weights_V_q1,
        din1 => input_r_q1,
        dout => r_V_103_fu_437_p2);

    mul_25s_32s_56_1_1_U2 : component nn_inference_mul_25s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => weights_layer1_weights_V_q0,
        din1 => input_r_q0,
        dout => r_V_105_fu_485_p2);

    mul_25s_32s_56_1_1_U3 : component nn_inference_mul_25s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => weights_layer1_weights_V_q1,
        din1 => input_r_q1,
        dout => r_V_107_fu_577_p2);

    mul_25s_32s_56_1_1_U4 : component nn_inference_mul_25s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => weights_layer1_weights_V_q0,
        din1 => input_r_q0,
        dout => r_V_109_fu_619_p2);

    mul_25s_32s_56_1_1_U5 : component nn_inference_mul_25s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => weights_layer1_weights_V_q1,
        din1 => input_r_q1,
        dout => r_V_111_fu_711_p2);

    mul_25s_32s_56_1_1_U6 : component nn_inference_mul_25s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => weights_layer1_weights_V_q0,
        din1 => input_r_q0,
        dout => r_V_113_fu_753_p2);

    mul_25s_32s_56_1_1_U7 : component nn_inference_mul_25s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => weights_layer1_weights_V_q1,
        din1 => input_r_q1,
        dout => r_V_115_fu_845_p2);

    mul_25s_32s_56_1_1_U8 : component nn_inference_mul_25s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => weights_layer1_weights_V_q0,
        din1 => input_r_q0,
        dout => r_V_117_fu_887_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_fu_363_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((tmp_fu_363_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp3_flush_enable)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter1_state16) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter1_state16) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_255 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_reg_255 <= add_ln21_fu_927_p2;
            end if; 
        end if;
    end process;

    k_2_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_2_reg_291 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_1_fu_534_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                k_2_reg_291 <= add_ln25_1_fu_540_p2;
            end if; 
        end if;
    end process;

    k_3_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k_3_reg_315 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln25_2_fu_668_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                k_3_reg_315 <= add_ln25_2_fu_674_p2;
            end if; 
        end if;
    end process;

    k_4_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_4_reg_339 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln25_3_fu_802_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                k_4_reg_339 <= add_ln25_3_fu_808_p2;
            end if; 
        end if;
    end process;

    k_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_363_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_267 <= ap_const_lv10_0;
            elsif (((icmp_ln25_fu_383_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_reg_267 <= add_ln25_fu_389_p2;
            end if; 
        end if;
    end process;

    sum_V_17_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_363_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_V_17_reg_278 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln25_reg_954_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_V_17_reg_278 <= ret_V_79_fu_509_p2(55 downto 24);
            end if; 
        end if;
    end process;

    sum_V_18_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_V_18_reg_302 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln25_1_reg_1010_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                sum_V_18_reg_302 <= ret_V_81_fu_643_p2(55 downto 24);
            end if; 
        end if;
    end process;

    sum_V_19_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_V_19_reg_326 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln25_2_reg_1066_pp2_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                sum_V_19_reg_326 <= ret_V_83_fu_777_p2(55 downto 24);
            end if; 
        end if;
    end process;

    sum_V_20_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                sum_V_20_reg_350 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln25_3_reg_1122_pp3_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                sum_V_20_reg_350 <= ret_V_85_fu_911_p2(55 downto 24);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln25_1_reg_1010 <= icmp_ln25_1_fu_534_p2;
                icmp_ln25_1_reg_1010_pp1_iter1_reg <= icmp_ln25_1_reg_1010;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln25_2_reg_1066 <= icmp_ln25_2_fu_668_p2;
                icmp_ln25_2_reg_1066_pp2_iter1_reg <= icmp_ln25_2_reg_1066;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln25_3_reg_1122 <= icmp_ln25_3_fu_802_p2;
                icmp_ln25_3_reg_1122_pp3_iter1_reg <= icmp_ln25_3_reg_1122;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln25_reg_954 <= icmp_ln25_fu_383_p2;
                icmp_ln25_reg_954_pp0_iter1_reg <= icmp_ln25_reg_954;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    or_ln21_1_reg_1055(0) <= or_ln21_1_fu_659_p2(0);    or_ln21_1_reg_1055(4 downto 2) <= or_ln21_1_fu_659_p2(4 downto 2);
                    zext_ln25_1_reg_1061(0) <= zext_ln25_1_fu_664_p1(0);    zext_ln25_1_reg_1061(4 downto 2) <= zext_ln25_1_fu_664_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    or_ln21_2_reg_1111(4 downto 2) <= or_ln21_2_fu_793_p2(4 downto 2);
                    zext_ln25_2_reg_1117(4 downto 2) <= zext_ln25_2_fu_798_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    or_ln21_reg_999(4 downto 1) <= or_ln21_fu_525_p2(4 downto 1);
                    zext_ln25_reg_1005(4 downto 1) <= zext_ln25_fu_530_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln25_1_fu_534_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    or_ln25_1_reg_1029(9 downto 1) <= or_ln25_1_fu_563_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_2_fu_668_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    or_ln25_2_reg_1085(9 downto 1) <= or_ln25_2_fu_697_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_3_fu_802_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                    or_ln25_3_reg_1141(9 downto 1) <= or_ln25_3_fu_831_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_383_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    or_ln25_reg_973(9 downto 1) <= or_ln25_fu_423_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_954 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                r_V_103_reg_979 <= r_V_103_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln25_1_reg_1010 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                r_V_107_reg_1035 <= r_V_107_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_2_reg_1066 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                r_V_111_reg_1091 <= r_V_111_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_3_reg_1122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                r_V_115_reg_1147 <= r_V_115_fu_845_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_363_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln21_reg_947 <= trunc_ln21_fu_379_p1;
                    zext_ln21_1_reg_942(5 downto 0) <= zext_ln21_1_fu_375_p1(5 downto 0);
                    zext_ln21_reg_937(5 downto 0) <= zext_ln21_fu_371_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln21_reg_937(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln21_1_reg_942(14 downto 6) <= "000000000";
    or_ln25_reg_973(0) <= '1';
    or_ln21_reg_999(0) <= '1';
    zext_ln25_reg_1005(0) <= '1';
    zext_ln25_reg_1005(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    or_ln25_1_reg_1029(0) <= '1';
    or_ln21_1_reg_1055(1) <= '1';
    zext_ln25_1_reg_1061(1) <= '1';
    zext_ln25_1_reg_1061(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    or_ln25_2_reg_1085(0) <= '1';
    or_ln21_2_reg_1111(1 downto 0) <= "11";
    zext_ln25_2_reg_1117(1 downto 0) <= "11";
    zext_ln25_2_reg_1117(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    or_ln25_3_reg_1141(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_363_p3, ap_CS_fsm_state2, icmp_ln25_fu_383_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, icmp_ln25_1_fu_534_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, icmp_ln25_2_fu_668_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_363_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln25_fu_383_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln25_fu_383_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_1_fu_534_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_1_fu_534_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln25_2_fu_668_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln25_2_fu_668_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln1118_fu_454_p2 <= std_logic_vector(unsigned(tmp_73_fu_447_p3) + unsigned(zext_ln21_1_reg_942));
    add_ln21_fu_927_p2 <= std_logic_vector(unsigned(j_reg_255) + unsigned(ap_const_lv6_4));
    add_ln25_1_fu_540_p2 <= std_logic_vector(unsigned(k_2_reg_291) + unsigned(ap_const_lv10_2));
    add_ln25_2_fu_674_p2 <= std_logic_vector(unsigned(k_3_reg_315) + unsigned(ap_const_lv10_2));
    add_ln25_3_fu_808_p2 <= std_logic_vector(unsigned(k_4_reg_339) + unsigned(ap_const_lv10_2));
    add_ln25_fu_389_p2 <= std_logic_vector(unsigned(k_reg_267) + unsigned(ap_const_lv10_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
    ap_CS_fsm_state18 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln25_fu_383_p2)
    begin
        if ((icmp_ln25_fu_383_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln25_1_fu_534_p2)
    begin
        if ((icmp_ln25_1_fu_534_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state11_assign_proc : process(icmp_ln25_2_fu_668_p2)
    begin
        if ((icmp_ln25_2_fu_668_p2 = ap_const_lv1_0)) then 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter1_state16_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_condition_pp3_exit_iter1_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter1_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_flush_enable_assign_proc : process(icmp_ln25_3_fu_802_p2, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_subdone)
    begin
        if (((icmp_ln25_3_fu_802_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
            ap_condition_pp3_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp3_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_363_p3, ap_CS_fsm_state2)
    begin
        if ((((tmp_fu_363_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_fu_363_p3, ap_CS_fsm_state2)
    begin
        if (((tmp_fu_363_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln25_1_fu_534_p2 <= "1" when (unsigned(k_2_reg_291) < unsigned(ap_const_lv10_300)) else "0";
    icmp_ln25_2_fu_668_p2 <= "1" when (unsigned(k_3_reg_315) < unsigned(ap_const_lv10_300)) else "0";
    icmp_ln25_3_fu_802_p2 <= "1" when (unsigned(k_4_reg_339) < unsigned(ap_const_lv10_300)) else "0";
    icmp_ln25_fu_383_p2 <= "1" when (unsigned(k_reg_267) < unsigned(ap_const_lv10_300)) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp0_stage0, zext_ln23_fu_443_p1, ap_block_pp1_stage0, zext_ln23_1_fu_583_p1, ap_block_pp2_stage0, zext_ln23_2_fu_717_p1, zext_ln23_3_fu_851_p1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            input_r_address0 <= zext_ln23_3_fu_851_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            input_r_address0 <= zext_ln23_2_fu_717_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            input_r_address0 <= zext_ln23_1_fu_583_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_r_address0 <= zext_ln23_fu_443_p1(10 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, ap_block_pp0_stage0, k_cast3_fu_395_p1, ap_block_pp1_stage0, k_2_cast4_fu_546_p1, ap_block_pp2_stage0, k_3_cast5_fu_680_p1, k_4_cast6_fu_814_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            input_r_address1 <= k_4_cast6_fu_814_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            input_r_address1 <= k_3_cast5_fu_680_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            input_r_address1 <= k_2_cast4_fu_546_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_r_address1 <= k_cast3_fu_395_p1(10 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    k_2_cast4_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_reg_291),64));
    k_3_cast5_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_3_reg_315),64));
    k_4_cast6_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_4_reg_339),64));
    k_cast3_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_267),64));
    lhs_80_fu_464_p3 <= (sum_V_17_reg_278 & ap_const_lv24_0);
    lhs_81_fu_501_p3 <= (tmp_74_fu_491_p4 & ap_const_lv24_0);
    lhs_83_fu_598_p3 <= (sum_V_18_reg_302 & ap_const_lv24_0);
    lhs_84_fu_635_p3 <= (tmp_77_fu_625_p4 & ap_const_lv24_0);
    lhs_86_fu_732_p3 <= (sum_V_19_reg_326 & ap_const_lv24_0);
    lhs_87_fu_769_p3 <= (tmp_80_fu_759_p4 & ap_const_lv24_0);
    lhs_89_fu_866_p3 <= (sum_V_20_reg_350 & ap_const_lv24_0);
    lhs_90_fu_903_p3 <= (tmp_83_fu_893_p4 & ap_const_lv24_0);
    or_ln21_1_fu_659_p2 <= (trunc_ln21_reg_947 or ap_const_lv5_2);
    or_ln21_2_fu_793_p2 <= (trunc_ln21_reg_947 or ap_const_lv5_3);
    or_ln21_fu_525_p2 <= (trunc_ln21_reg_947 or ap_const_lv5_1);
    or_ln25_1_fu_563_p2 <= (k_2_reg_291 or ap_const_lv10_1);
    or_ln25_2_fu_697_p2 <= (k_3_reg_315 or ap_const_lv10_1);
    or_ln25_3_fu_831_p2 <= (k_4_reg_339 or ap_const_lv10_1);
    or_ln25_fu_423_p2 <= (k_reg_267 or ap_const_lv10_1);

    output_0_address0_assign_proc : process(zext_ln21_reg_937, ap_CS_fsm_state6, zext_ln25_reg_1005, ap_CS_fsm_state10, zext_ln25_1_reg_1061, ap_CS_fsm_state14, zext_ln25_2_reg_1117, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_0_address0 <= zext_ln25_2_reg_1117(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_0_address0 <= zext_ln25_1_reg_1061(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_0_address0 <= zext_ln25_reg_1005(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_0_address0 <= zext_ln21_reg_937(5 - 1 downto 0);
        else 
            output_0_address0 <= "XXXXX";
        end if; 
    end process;


    output_0_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_0_d0_assign_proc : process(sum_V_17_reg_278, sum_V_18_reg_302, sum_V_19_reg_326, sum_V_20_reg_350, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_0_d0 <= sum_V_20_reg_350;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_0_d0 <= sum_V_19_reg_326;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_0_d0 <= sum_V_18_reg_302;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_0_d0 <= sum_V_17_reg_278;
        else 
            output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_0_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_79_fu_509_p2 <= std_logic_vector(unsigned(lhs_81_fu_501_p3) + unsigned(r_V_105_fu_485_p2));
    ret_V_80_fu_606_p2 <= std_logic_vector(unsigned(lhs_83_fu_598_p3) + unsigned(r_V_107_reg_1035));
    ret_V_81_fu_643_p2 <= std_logic_vector(unsigned(lhs_84_fu_635_p3) + unsigned(r_V_109_fu_619_p2));
    ret_V_82_fu_740_p2 <= std_logic_vector(unsigned(lhs_86_fu_732_p3) + unsigned(r_V_111_reg_1091));
    ret_V_83_fu_777_p2 <= std_logic_vector(unsigned(lhs_87_fu_769_p3) + unsigned(r_V_113_fu_753_p2));
    ret_V_84_fu_874_p2 <= std_logic_vector(unsigned(lhs_89_fu_866_p3) + unsigned(r_V_115_reg_1147));
    ret_V_85_fu_911_p2 <= std_logic_vector(unsigned(lhs_90_fu_903_p3) + unsigned(r_V_117_fu_887_p2));
    ret_V_fu_472_p2 <= std_logic_vector(unsigned(lhs_80_fu_464_p3) + unsigned(r_V_103_reg_979));
    tmp_72_fu_410_p3 <= (tmp_s_fu_400_p4 & j_reg_255);
    tmp_73_fu_447_p3 <= (or_ln25_reg_973 & ap_const_lv5_0);
    tmp_74_fu_491_p4 <= ret_V_fu_472_p2(55 downto 24);
    tmp_75_fu_551_p3 <= (k_2_reg_291 & or_ln21_reg_999);
    tmp_76_fu_587_p3 <= (or_ln25_1_reg_1029 & or_ln21_reg_999);
    tmp_77_fu_625_p4 <= ret_V_80_fu_606_p2(55 downto 24);
    tmp_78_fu_685_p3 <= (k_3_reg_315 & or_ln21_1_reg_1055);
    tmp_79_fu_721_p3 <= (or_ln25_2_reg_1085 & or_ln21_1_reg_1055);
    tmp_80_fu_759_p4 <= ret_V_82_fu_740_p2(55 downto 24);
    tmp_81_fu_819_p3 <= (k_4_reg_339 & or_ln21_2_reg_1111);
    tmp_82_fu_855_p3 <= (or_ln25_3_reg_1141 & or_ln21_2_reg_1111);
    tmp_83_fu_893_p4 <= ret_V_84_fu_874_p2(55 downto 24);
    tmp_fu_363_p3 <= j_reg_255(5 downto 5);
    tmp_s_fu_400_p4 <= k_reg_267(9 downto 1);
    trunc_ln21_fu_379_p1 <= j_reg_255(5 - 1 downto 0);

    weights_layer1_weights_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp0_stage0, zext_ln1118_4_fu_459_p1, ap_block_pp1_stage0, zext_ln1118_6_fu_593_p1, ap_block_pp2_stage0, zext_ln1118_8_fu_727_p1, zext_ln1118_10_fu_861_p1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            weights_layer1_weights_V_address0 <= zext_ln1118_10_fu_861_p1(15 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            weights_layer1_weights_V_address0 <= zext_ln1118_8_fu_727_p1(15 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            weights_layer1_weights_V_address0 <= zext_ln1118_6_fu_593_p1(15 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            weights_layer1_weights_V_address0 <= zext_ln1118_4_fu_459_p1(15 - 1 downto 0);
        else 
            weights_layer1_weights_V_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    weights_layer1_weights_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0, zext_ln1118_fu_418_p1, ap_block_pp0_stage0, zext_ln1118_5_fu_558_p1, ap_block_pp1_stage0, zext_ln1118_7_fu_692_p1, ap_block_pp2_stage0, zext_ln1118_9_fu_826_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            weights_layer1_weights_V_address1 <= zext_ln1118_9_fu_826_p1(15 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            weights_layer1_weights_V_address1 <= zext_ln1118_7_fu_692_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            weights_layer1_weights_V_address1 <= zext_ln1118_5_fu_558_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            weights_layer1_weights_V_address1 <= zext_ln1118_fu_418_p1(15 - 1 downto 0);
        else 
            weights_layer1_weights_V_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    weights_layer1_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            weights_layer1_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights_layer1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_layer1_weights_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            weights_layer1_weights_V_ce1 <= ap_const_logic_1;
        else 
            weights_layer1_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1118_10_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_855_p3),64));
    zext_ln1118_4_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_fu_454_p2),64));
    zext_ln1118_5_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_551_p3),64));
    zext_ln1118_6_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_fu_587_p3),64));
    zext_ln1118_7_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_fu_685_p3),64));
    zext_ln1118_8_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_fu_721_p3),64));
    zext_ln1118_9_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_819_p3),64));
    zext_ln1118_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_410_p3),64));
    zext_ln21_1_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_255),15));
    zext_ln21_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_255),64));
    zext_ln23_1_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_1_reg_1029),64));
    zext_ln23_2_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_2_reg_1085),64));
    zext_ln23_3_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_3_reg_1141),64));
    zext_ln23_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln25_reg_973),64));
    zext_ln25_1_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln21_1_fu_659_p2),64));
    zext_ln25_2_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln21_2_fu_793_p2),64));
    zext_ln25_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln21_fu_525_p2),64));
end behav;
