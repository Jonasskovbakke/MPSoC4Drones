-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nn_inference is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_img_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_img_ce0 : OUT STD_LOGIC;
    input_img_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of nn_inference is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nn_inference_nn_inference,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.284616,HLS_SYN_LAT=13542,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=0,HLS_SYN_FF=5577,HLS_SYN_LUT=55800,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1000000 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv12_FE8 : STD_LOGIC_VECTOR (11 downto 0) := "111111101000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv12_35 : STD_LOGIC_VECTOR (11 downto 0) := "000000110101";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_82000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000010000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_layer2_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights_layer2_weights_V_ce0 : STD_LOGIC;
    signal weights_layer2_weights_V_q0 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_layer2_weights_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights_layer2_weights_V_ce1 : STD_LOGIC;
    signal weights_layer2_weights_V_q1 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_reg_316 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_339 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_V_4_reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_363 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_V_5_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln5_fu_413_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln5_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_1147 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_1147_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_1147_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1151 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1151_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1151_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal input_img_load_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_img_load_reg_1161_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln565_fu_465_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_1176 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln571_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1181 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_475_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_1189 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_701_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln42_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_reg_1201 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_1_fu_713_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_1_reg_1206 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln42_fu_717_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln42_reg_1211 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1216 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state12_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_10_reg_1216_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln46_fu_729_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal empty_38_fu_763_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_38_reg_1230 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_1_fu_775_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_1_reg_1240 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal or_ln42_fu_870_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln42_reg_1260 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln46_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_1266 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_879_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1271 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state16_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal tmp_11_reg_1271_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln46_1_fu_887_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal or_ln46_1_fu_914_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln46_1_reg_1290 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_5_fu_928_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_5_reg_1296 : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal add_ln42_fu_1010_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_hwmm_layer3_fu_397_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer3_fu_397_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer3_fu_397_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer3_fu_397_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hwmm_layer3_fu_397_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_reg_1321_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal temp_output3_0_0_V_reg_1326 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output3_0_1_V_reg_1332 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output3_0_2_V_reg_1338 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output3_0_3_V_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_1350 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln1494_1_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_reg_1355 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_reg_1360 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_3_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_3_reg_1366 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_4_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_4_reg_1371 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_condition_pp2_exit_iter1_state17 : STD_LOGIC;
    signal fp_input_img_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fp_input_img_V_ce0 : STD_LOGIC;
    signal fp_input_img_V_we0 : STD_LOGIC;
    signal fp_input_img_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_input_img_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fp_input_img_V_ce1 : STD_LOGIC;
    signal fp_input_img_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output_0_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_output_0_V_ce0 : STD_LOGIC;
    signal temp_output_0_V_we0 : STD_LOGIC;
    signal temp_output_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output_0_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_output_0_V_ce1 : STD_LOGIC;
    signal temp_output_0_V_we1 : STD_LOGIC;
    signal temp_output_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output2_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_output2_0_V_ce0 : STD_LOGIC;
    signal temp_output2_0_V_we0 : STD_LOGIC;
    signal temp_output2_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output2_0_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output2_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_output2_0_V_ce1 : STD_LOGIC;
    signal temp_output2_0_V_we1 : STD_LOGIC;
    signal temp_output2_0_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer1_fu_387_ap_start : STD_LOGIC;
    signal grp_hw_act_layer1_fu_387_ap_done : STD_LOGIC;
    signal grp_hw_act_layer1_fu_387_ap_idle : STD_LOGIC;
    signal grp_hw_act_layer1_fu_387_ap_ready : STD_LOGIC;
    signal grp_hw_act_layer1_fu_387_output_0_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer1_fu_387_output_0_V_ce0 : STD_LOGIC;
    signal grp_hw_act_layer1_fu_387_output_0_V_we0 : STD_LOGIC;
    signal grp_hw_act_layer1_fu_387_output_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer1_fu_387_output_0_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer1_fu_387_output_0_V_ce1 : STD_LOGIC;
    signal grp_hw_act_layer1_fu_387_output_0_V_we1 : STD_LOGIC;
    signal grp_hw_act_layer1_fu_387_output_0_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer1_fu_387_grp_fu_1377_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer1_fu_387_grp_fu_1377_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer1_fu_387_grp_fu_1377_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer1_fu_387_grp_fu_1377_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hw_act_layer1_fu_387_grp_fu_1377_p_ce : STD_LOGIC;
    signal grp_hw_act_layer1_fu_387_grp_fu_1381_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer1_fu_387_grp_fu_1381_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer1_fu_387_grp_fu_1381_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer1_fu_387_grp_fu_1381_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hw_act_layer1_fu_387_grp_fu_1381_p_ce : STD_LOGIC;
    signal grp_hw_act_layer2_fu_392_ap_start : STD_LOGIC;
    signal grp_hw_act_layer2_fu_392_ap_done : STD_LOGIC;
    signal grp_hw_act_layer2_fu_392_ap_idle : STD_LOGIC;
    signal grp_hw_act_layer2_fu_392_ap_ready : STD_LOGIC;
    signal grp_hw_act_layer2_fu_392_output_0_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hw_act_layer2_fu_392_output_0_V_ce0 : STD_LOGIC;
    signal grp_hw_act_layer2_fu_392_output_0_V_we0 : STD_LOGIC;
    signal grp_hw_act_layer2_fu_392_output_0_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer2_fu_392_output_0_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hw_act_layer2_fu_392_output_0_V_ce1 : STD_LOGIC;
    signal grp_hw_act_layer2_fu_392_output_0_V_we1 : STD_LOGIC;
    signal grp_hw_act_layer2_fu_392_output_0_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hw_act_layer2_fu_392_grp_fu_1377_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer2_fu_392_grp_fu_1377_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer2_fu_392_grp_fu_1377_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer2_fu_392_grp_fu_1377_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hw_act_layer2_fu_392_grp_fu_1377_p_ce : STD_LOGIC;
    signal grp_hw_act_layer2_fu_392_grp_fu_1381_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer2_fu_392_grp_fu_1381_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_hw_act_layer2_fu_392_grp_fu_1381_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hw_act_layer2_fu_392_grp_fu_1381_p_dout0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_hw_act_layer2_fu_392_grp_fu_1381_p_ce : STD_LOGIC;
    signal grp_hwmm_layer3_fu_397_ap_start : STD_LOGIC;
    signal grp_hwmm_layer3_fu_397_ap_done : STD_LOGIC;
    signal grp_hwmm_layer3_fu_397_ap_idle : STD_LOGIC;
    signal grp_hwmm_layer3_fu_397_ap_ready : STD_LOGIC;
    signal grp_hwmm_layer3_fu_397_input_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hwmm_layer3_fu_397_input_0_ce0 : STD_LOGIC;
    signal grp_hwmm_layer3_fu_397_input_0_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hwmm_layer3_fu_397_input_0_ce1 : STD_LOGIC;
    signal grp_hwmm_layer1_fu_402_ap_start : STD_LOGIC;
    signal grp_hwmm_layer1_fu_402_ap_done : STD_LOGIC;
    signal grp_hwmm_layer1_fu_402_ap_idle : STD_LOGIC;
    signal grp_hwmm_layer1_fu_402_ap_ready : STD_LOGIC;
    signal grp_hwmm_layer1_fu_402_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_hwmm_layer1_fu_402_input_r_ce0 : STD_LOGIC;
    signal grp_hwmm_layer1_fu_402_input_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_hwmm_layer1_fu_402_input_r_ce1 : STD_LOGIC;
    signal grp_hwmm_layer1_fu_402_output_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_hwmm_layer1_fu_402_output_0_ce0 : STD_LOGIC;
    signal grp_hwmm_layer1_fu_402_output_0_we0 : STD_LOGIC;
    signal grp_hwmm_layer1_fu_402_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_327 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal grp_hw_act_layer1_fu_387_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_hw_act_layer2_fu_392_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_hwmm_layer3_fu_397_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_hwmm_layer1_fu_402_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln1118_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal k_cast37_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_1_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_2_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_cast38_fu_893_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1118_3_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln571_4_fu_692_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_fu_451_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln555_fu_439_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln455_fu_461_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_1_fu_481_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_488_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_492_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln581_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_510_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_515_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_520_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_498_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_fu_541_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln581_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_557_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_561_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_1_fu_571_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln582_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln603_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_578_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln586_fu_567_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln582_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_fu_650_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_1_fu_662_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln571_1_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_3_fu_678_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln571_2_fu_670_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_740_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_750_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln46_fu_781_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_791_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1118_fu_799_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_1_fu_809_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_1_fu_817_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_6_fu_836_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_2_fu_846_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_3_fu_830_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_2_fu_854_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_7_fu_898_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_40_fu_910_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_938_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_4_fu_949_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_3_fu_957_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_9_fu_976_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_5_fu_986_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal r_V_7_fu_970_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_4_fu_994_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal max_val_V_fu_1040_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_V_2_fu_1052_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_V_3_fu_1064_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_V_5_fu_1076_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal or_ln118_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln118_1_fu_1104_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln114_fu_1111_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln118_2_fu_1118_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln118_1_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln118_fu_1097_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln835_fu_1126_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_fu_1130_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1377_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1377_ce : STD_LOGIC;
    signal grp_fu_1377_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1381_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1381_ce : STD_LOGIC;
    signal grp_fu_1381_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nn_inference_hw_act_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_V_ce0 : OUT STD_LOGIC;
        output_0_V_we0 : OUT STD_LOGIC;
        output_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_V_ce1 : OUT STD_LOGIC;
        output_0_V_we1 : OUT STD_LOGIC;
        output_0_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1377_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1377_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1377_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_1377_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_1377_p_ce : OUT STD_LOGIC;
        grp_fu_1381_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1381_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1381_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_1381_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_1381_p_ce : OUT STD_LOGIC );
    end component;


    component nn_inference_hw_act_layer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_0_V_ce0 : OUT STD_LOGIC;
        output_0_V_we0 : OUT STD_LOGIC;
        output_0_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_0_V_ce1 : OUT STD_LOGIC;
        output_0_V_we1 : OUT STD_LOGIC;
        output_0_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_0_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1377_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1377_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1377_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_1377_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_1377_p_ce : OUT STD_LOGIC;
        grp_fu_1381_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1381_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1381_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_1381_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_1381_p_ce : OUT STD_LOGIC );
    end component;


    component nn_inference_hwmm_layer3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_0_ce1 : OUT STD_LOGIC;
        input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_hwmm_layer1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component nn_inference_mul_27s_32s_56_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component nn_inference_weights_layer2_weights_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (26 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component nn_inference_fp_input_img_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_temp_output_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nn_inference_temp_output2_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    weights_layer2_weights_V_U : component nn_inference_weights_layer2_weights_V
    generic map (
        DataWidth => 27,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_layer2_weights_V_address0,
        ce0 => weights_layer2_weights_V_ce0,
        q0 => weights_layer2_weights_V_q0,
        address1 => weights_layer2_weights_V_address1,
        ce1 => weights_layer2_weights_V_ce1,
        q1 => weights_layer2_weights_V_q1);

    fp_input_img_V_U : component nn_inference_fp_input_img_V
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fp_input_img_V_address0,
        ce0 => fp_input_img_V_ce0,
        we0 => fp_input_img_V_we0,
        d0 => fp_input_img_V_d0,
        q0 => fp_input_img_V_q0,
        address1 => grp_hwmm_layer1_fu_402_input_r_address1,
        ce1 => fp_input_img_V_ce1,
        q1 => fp_input_img_V_q1);

    temp_output_0_V_U : component nn_inference_temp_output_0_V
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_output_0_V_address0,
        ce0 => temp_output_0_V_ce0,
        we0 => temp_output_0_V_we0,
        d0 => temp_output_0_V_d0,
        q0 => temp_output_0_V_q0,
        address1 => temp_output_0_V_address1,
        ce1 => temp_output_0_V_ce1,
        we1 => temp_output_0_V_we1,
        d1 => grp_hw_act_layer1_fu_387_output_0_V_d1,
        q1 => temp_output_0_V_q1);

    temp_output2_0_V_U : component nn_inference_temp_output2_0_V
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_output2_0_V_address0,
        ce0 => temp_output2_0_V_ce0,
        we0 => temp_output2_0_V_we0,
        d0 => temp_output2_0_V_d0,
        q0 => temp_output2_0_V_q0,
        address1 => temp_output2_0_V_address1,
        ce1 => temp_output2_0_V_ce1,
        we1 => temp_output2_0_V_we1,
        d1 => grp_hw_act_layer2_fu_392_output_0_V_d1,
        q1 => temp_output2_0_V_q1);

    grp_hw_act_layer1_fu_387 : component nn_inference_hw_act_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hw_act_layer1_fu_387_ap_start,
        ap_done => grp_hw_act_layer1_fu_387_ap_done,
        ap_idle => grp_hw_act_layer1_fu_387_ap_idle,
        ap_ready => grp_hw_act_layer1_fu_387_ap_ready,
        output_0_V_address0 => grp_hw_act_layer1_fu_387_output_0_V_address0,
        output_0_V_ce0 => grp_hw_act_layer1_fu_387_output_0_V_ce0,
        output_0_V_we0 => grp_hw_act_layer1_fu_387_output_0_V_we0,
        output_0_V_d0 => grp_hw_act_layer1_fu_387_output_0_V_d0,
        output_0_V_q0 => temp_output_0_V_q0,
        output_0_V_address1 => grp_hw_act_layer1_fu_387_output_0_V_address1,
        output_0_V_ce1 => grp_hw_act_layer1_fu_387_output_0_V_ce1,
        output_0_V_we1 => grp_hw_act_layer1_fu_387_output_0_V_we1,
        output_0_V_d1 => grp_hw_act_layer1_fu_387_output_0_V_d1,
        output_0_V_q1 => temp_output_0_V_q1,
        grp_fu_1377_p_din0 => grp_hw_act_layer1_fu_387_grp_fu_1377_p_din0,
        grp_fu_1377_p_din1 => grp_hw_act_layer1_fu_387_grp_fu_1377_p_din1,
        grp_fu_1377_p_opcode => grp_hw_act_layer1_fu_387_grp_fu_1377_p_opcode,
        grp_fu_1377_p_dout0 => grp_hw_act_layer1_fu_387_grp_fu_1377_p_dout0,
        grp_fu_1377_p_ce => grp_hw_act_layer1_fu_387_grp_fu_1377_p_ce,
        grp_fu_1381_p_din0 => grp_hw_act_layer1_fu_387_grp_fu_1381_p_din0,
        grp_fu_1381_p_din1 => grp_hw_act_layer1_fu_387_grp_fu_1381_p_din1,
        grp_fu_1381_p_opcode => grp_hw_act_layer1_fu_387_grp_fu_1381_p_opcode,
        grp_fu_1381_p_dout0 => grp_hw_act_layer1_fu_387_grp_fu_1381_p_dout0,
        grp_fu_1381_p_ce => grp_hw_act_layer1_fu_387_grp_fu_1381_p_ce);

    grp_hw_act_layer2_fu_392 : component nn_inference_hw_act_layer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hw_act_layer2_fu_392_ap_start,
        ap_done => grp_hw_act_layer2_fu_392_ap_done,
        ap_idle => grp_hw_act_layer2_fu_392_ap_idle,
        ap_ready => grp_hw_act_layer2_fu_392_ap_ready,
        output_0_V_address0 => grp_hw_act_layer2_fu_392_output_0_V_address0,
        output_0_V_ce0 => grp_hw_act_layer2_fu_392_output_0_V_ce0,
        output_0_V_we0 => grp_hw_act_layer2_fu_392_output_0_V_we0,
        output_0_V_d0 => grp_hw_act_layer2_fu_392_output_0_V_d0,
        output_0_V_q0 => temp_output2_0_V_q0,
        output_0_V_address1 => grp_hw_act_layer2_fu_392_output_0_V_address1,
        output_0_V_ce1 => grp_hw_act_layer2_fu_392_output_0_V_ce1,
        output_0_V_we1 => grp_hw_act_layer2_fu_392_output_0_V_we1,
        output_0_V_d1 => grp_hw_act_layer2_fu_392_output_0_V_d1,
        output_0_V_q1 => temp_output2_0_V_q1,
        grp_fu_1377_p_din0 => grp_hw_act_layer2_fu_392_grp_fu_1377_p_din0,
        grp_fu_1377_p_din1 => grp_hw_act_layer2_fu_392_grp_fu_1377_p_din1,
        grp_fu_1377_p_opcode => grp_hw_act_layer2_fu_392_grp_fu_1377_p_opcode,
        grp_fu_1377_p_dout0 => grp_hw_act_layer2_fu_392_grp_fu_1377_p_dout0,
        grp_fu_1377_p_ce => grp_hw_act_layer2_fu_392_grp_fu_1377_p_ce,
        grp_fu_1381_p_din0 => grp_hw_act_layer2_fu_392_grp_fu_1381_p_din0,
        grp_fu_1381_p_din1 => grp_hw_act_layer2_fu_392_grp_fu_1381_p_din1,
        grp_fu_1381_p_opcode => grp_hw_act_layer2_fu_392_grp_fu_1381_p_opcode,
        grp_fu_1381_p_dout0 => grp_hw_act_layer2_fu_392_grp_fu_1381_p_dout0,
        grp_fu_1381_p_ce => grp_hw_act_layer2_fu_392_grp_fu_1381_p_ce);

    grp_hwmm_layer3_fu_397 : component nn_inference_hwmm_layer3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hwmm_layer3_fu_397_ap_start,
        ap_done => grp_hwmm_layer3_fu_397_ap_done,
        ap_idle => grp_hwmm_layer3_fu_397_ap_idle,
        ap_ready => grp_hwmm_layer3_fu_397_ap_ready,
        input_0_address0 => grp_hwmm_layer3_fu_397_input_0_address0,
        input_0_ce0 => grp_hwmm_layer3_fu_397_input_0_ce0,
        input_0_q0 => temp_output2_0_V_q0,
        input_0_address1 => grp_hwmm_layer3_fu_397_input_0_address1,
        input_0_ce1 => grp_hwmm_layer3_fu_397_input_0_ce1,
        input_0_q1 => temp_output2_0_V_q1,
        ap_return_0 => grp_hwmm_layer3_fu_397_ap_return_0,
        ap_return_1 => grp_hwmm_layer3_fu_397_ap_return_1,
        ap_return_2 => grp_hwmm_layer3_fu_397_ap_return_2,
        ap_return_3 => grp_hwmm_layer3_fu_397_ap_return_3,
        ap_return_4 => grp_hwmm_layer3_fu_397_ap_return_4);

    grp_hwmm_layer1_fu_402 : component nn_inference_hwmm_layer1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hwmm_layer1_fu_402_ap_start,
        ap_done => grp_hwmm_layer1_fu_402_ap_done,
        ap_idle => grp_hwmm_layer1_fu_402_ap_idle,
        ap_ready => grp_hwmm_layer1_fu_402_ap_ready,
        input_r_address0 => grp_hwmm_layer1_fu_402_input_r_address0,
        input_r_ce0 => grp_hwmm_layer1_fu_402_input_r_ce0,
        input_r_q0 => fp_input_img_V_q0,
        input_r_address1 => grp_hwmm_layer1_fu_402_input_r_address1,
        input_r_ce1 => grp_hwmm_layer1_fu_402_input_r_ce1,
        input_r_q1 => fp_input_img_V_q1,
        output_0_address0 => grp_hwmm_layer1_fu_402_output_0_address0,
        output_0_ce0 => grp_hwmm_layer1_fu_402_output_0_ce0,
        output_0_we0 => grp_hwmm_layer1_fu_402_output_0_we0,
        output_0_d0 => grp_hwmm_layer1_fu_402_output_0_d0);

    fpext_32ns_64_2_no_dsp_1_U116 : component nn_inference_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_410_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_410_p1);

    mul_27s_32s_56_1_1_U117 : component nn_inference_mul_27s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => weights_layer2_weights_V_q1,
        din1 => temp_output_0_V_q1,
        dout => r_V_1_fu_775_p2);

    mul_27s_32s_56_1_1_U118 : component nn_inference_mul_27s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => weights_layer2_weights_V_q0,
        din1 => temp_output_0_V_q0,
        dout => r_V_3_fu_830_p2);

    mul_27s_32s_56_1_1_U119 : component nn_inference_mul_27s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => weights_layer2_weights_V_q1,
        din1 => temp_output_0_V_q0,
        dout => r_V_5_fu_928_p2);

    mul_27s_32s_56_1_1_U120 : component nn_inference_mul_27s_32s_56_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 27,
        din1_WIDTH => 32,
        dout_WIDTH => 56)
    port map (
        din0 => weights_layer2_weights_V_q0,
        din1 => temp_output_0_V_q1,
        dout => r_V_7_fu_970_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U121 : component nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1377_p0,
        din1 => grp_fu_1377_p1,
        ce => grp_fu_1377_ce,
        opcode => grp_fu_1377_opcode,
        dout => grp_fu_1377_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U122 : component nn_inference_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1381_p0,
        din1 => grp_fu_1381_p1,
        ce => grp_fu_1381_ce,
        opcode => grp_fu_1381_opcode,
        dout => grp_fu_1381_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_2_fu_701_p3 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_2_fu_701_p3 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter1_state17)))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter1_state17))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hw_act_layer1_fu_387_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hw_act_layer1_fu_387_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_hw_act_layer1_fu_387_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hw_act_layer1_fu_387_ap_ready = ap_const_logic_1)) then 
                    grp_hw_act_layer1_fu_387_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hw_act_layer2_fu_392_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hw_act_layer2_fu_392_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_2_fu_701_p3 = ap_const_lv1_1))) then 
                    grp_hw_act_layer2_fu_392_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hw_act_layer2_fu_392_ap_ready = ap_const_logic_1)) then 
                    grp_hw_act_layer2_fu_392_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hwmm_layer1_fu_402_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hwmm_layer1_fu_402_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_hwmm_layer1_fu_402_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hwmm_layer1_fu_402_ap_ready = ap_const_logic_1)) then 
                    grp_hwmm_layer1_fu_402_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hwmm_layer3_fu_397_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hwmm_layer3_fu_397_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_hwmm_layer3_fu_397_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hwmm_layer3_fu_397_ap_ready = ap_const_logic_1)) then 
                    grp_hwmm_layer3_fu_397_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_316 <= ap_const_lv10_0;
            elsif (((icmp_ln5_fu_419_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_316 <= add_ln5_fu_413_p2;
            end if; 
        end if;
    end process;

    j_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_hw_act_layer1_fu_387_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j_reg_327 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_reg_327 <= add_ln42_fu_1010_p2;
            end if; 
        end if;
    end process;

    k_1_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                k_1_reg_363 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_11_fu_879_p3 = ap_const_lv1_0))) then 
                k_1_reg_363 <= add_ln46_1_fu_887_p2;
            end if; 
        end if;
    end process;

    k_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_2_fu_701_p3 = ap_const_lv1_0))) then 
                k_reg_339 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_10_fu_721_p3 = ap_const_lv1_0))) then 
                k_reg_339 <= add_ln46_fu_729_p2;
            end if; 
        end if;
    end process;

    sum_V_4_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_2_fu_701_p3 = ap_const_lv1_0))) then 
                sum_V_4_reg_350 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (tmp_10_reg_1216_pp1_iter1_reg = ap_const_lv1_0))) then 
                sum_V_4_reg_350 <= ret_V_2_fu_854_p2(55 downto 24);
            end if; 
        end if;
    end process;

    sum_V_5_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                sum_V_5_reg_374 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (tmp_11_reg_1271_pp2_iter1_reg = ap_const_lv1_0))) then 
                sum_V_5_reg_374 <= ret_V_4_fu_994_p2(55 downto 24);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_1147_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                F2_reg_1189 <= F2_fu_475_p2;
                icmp_ln571_reg_1181 <= icmp_ln571_fu_469_p2;
                p_Result_s_reg_1171 <= ireg_fu_435_p1(63 downto 63);
                trunc_ln565_reg_1176 <= trunc_ln565_fu_465_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                call_ret_reg_1321_4 <= grp_hwmm_layer3_fu_397_ap_return_4;
                temp_output3_0_0_V_reg_1326 <= grp_hwmm_layer3_fu_397_ap_return_0;
                temp_output3_0_1_V_reg_1332 <= grp_hwmm_layer3_fu_397_ap_return_1;
                temp_output3_0_2_V_reg_1338 <= grp_hwmm_layer3_fu_397_ap_return_2;
                temp_output3_0_3_V_reg_1344 <= grp_hwmm_layer3_fu_397_ap_return_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_10_fu_721_p3 = ap_const_lv1_0))) then
                empty_38_reg_1230 <= empty_38_fu_763_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_fu_419_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_cast_reg_1151(9 downto 0) <= i_cast_fu_425_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_cast_reg_1151_pp0_iter1_reg(9 downto 0) <= i_cast_reg_1151(9 downto 0);
                icmp_ln5_reg_1147 <= icmp_ln5_fu_419_p2;
                icmp_ln5_reg_1147_pp0_iter1_reg <= icmp_ln5_reg_1147;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                    i_cast_reg_1151_pp0_iter2_reg(9 downto 0) <= i_cast_reg_1151_pp0_iter1_reg(9 downto 0);
                icmp_ln5_reg_1147_pp0_iter2_reg <= icmp_ln5_reg_1147_pp0_iter1_reg;
                input_img_load_reg_1161_pp0_iter2_reg <= input_img_load_reg_1161;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                icmp_ln1494_1_reg_1355 <= icmp_ln1494_1_fu_1047_p2;
                icmp_ln1494_2_reg_1360 <= icmp_ln1494_2_fu_1059_p2;
                icmp_ln1494_3_reg_1366 <= icmp_ln1494_3_fu_1071_p2;
                icmp_ln1494_4_reg_1371 <= icmp_ln1494_4_fu_1083_p2;
                icmp_ln1494_reg_1350 <= icmp_ln1494_fu_1035_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_1147 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                input_img_load_reg_1161 <= input_img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    or_ln42_reg_1260(3 downto 1) <= or_ln42_fu_870_p2(3 downto 1);
                    zext_ln46_reg_1266(3 downto 1) <= zext_ln46_fu_875_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_11_fu_879_p3 = ap_const_lv1_0))) then
                    or_ln46_1_reg_1290(4 downto 1) <= or_ln46_1_fu_914_p2(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_10_reg_1216 = ap_const_lv1_0))) then
                r_V_1_reg_1240 <= r_V_1_fu_775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_11_reg_1271 = ap_const_lv1_0))) then
                r_V_5_reg_1296 <= r_V_5_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_10_reg_1216 <= k_reg_339(5 downto 5);
                tmp_10_reg_1216_pp1_iter1_reg <= tmp_10_reg_1216;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_11_reg_1271 <= k_1_reg_363(5 downto 5);
                tmp_11_reg_1271_pp2_iter1_reg <= tmp_11_reg_1271;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_2_fu_701_p3 = ap_const_lv1_0))) then
                trunc_ln42_reg_1211 <= trunc_ln42_fu_717_p1;
                    zext_ln42_1_reg_1206(4 downto 0) <= zext_ln42_1_fu_713_p1(4 downto 0);
                    zext_ln42_reg_1201(4 downto 0) <= zext_ln42_fu_709_p1(4 downto 0);
            end if;
        end if;
    end process;
    i_cast_reg_1151(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1151_pp0_iter1_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1151_pp0_iter2_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln42_reg_1201(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln42_1_reg_1206(8 downto 5) <= "0000";
    or_ln42_reg_1260(0) <= '1';
    zext_ln46_reg_1266(0) <= '1';
    zext_ln46_reg_1266(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    or_ln46_1_reg_1290(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln5_fu_419_p2, tmp_2_fu_701_p3, ap_CS_fsm_state11, tmp_10_fu_721_p3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state22, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, grp_hw_act_layer1_fu_387_ap_done, grp_hw_act_layer2_fu_392_ap_done, grp_hwmm_layer3_fu_397_ap_done, grp_hwmm_layer1_fu_402_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state20, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln5_fu_419_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln5_fu_419_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_hwmm_layer1_fu_402_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_hw_act_layer1_fu_387_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_2_fu_701_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_10_fu_721_p3 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_10_fu_721_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state20 => 
                if (((grp_hw_act_layer2_fu_392_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_hwmm_layer3_fu_397_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_475_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_461_p1));
    add_ln1118_fu_799_p2 <= std_logic_vector(unsigned(tmp_5_fu_791_p3) + unsigned(zext_ln42_1_reg_1206));
    add_ln42_fu_1010_p2 <= std_logic_vector(unsigned(j_reg_327) + unsigned(ap_const_lv5_2));
    add_ln46_1_fu_887_p2 <= std_logic_vector(unsigned(k_1_reg_363) + unsigned(ap_const_lv6_2));
    add_ln46_fu_729_p2 <= std_logic_vector(unsigned(k_reg_339) + unsigned(ap_const_lv6_2));
    add_ln581_fu_510_p2 <= std_logic_vector(unsigned(F2_reg_1189) + unsigned(ap_const_lv12_FE8));
    add_ln5_fu_413_p2 <= std_logic_vector(unsigned(i_reg_316) + unsigned(ap_const_lv10_1));
    and_ln581_fu_614_p2 <= (xor_ln582_fu_608_p2 and icmp_ln581_fu_505_p2);
    and_ln582_fu_597_p2 <= (xor_ln571_fu_592_p2 and icmp_ln582_fu_532_p2);
    and_ln585_fu_626_p2 <= (icmp_ln585_fu_620_p2 and and_ln581_fu_614_p2);
    and_ln603_fu_644_p2 <= (xor_ln581_fu_638_p2 and icmp_ln603_fu_551_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
    ap_CS_fsm_state15 <= ap_CS_fsm(9);
    ap_CS_fsm_state19 <= ap_CS_fsm(11);
    ap_CS_fsm_state20 <= ap_CS_fsm(12);
    ap_CS_fsm_state21 <= ap_CS_fsm(13);
    ap_CS_fsm_state22 <= ap_CS_fsm(14);
    ap_CS_fsm_state23 <= ap_CS_fsm(15);
    ap_CS_fsm_state24 <= ap_CS_fsm(16);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln5_fu_419_p2)
    begin
        if ((icmp_ln5_fu_419_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state12_assign_proc : process(tmp_10_fu_721_p3)
    begin
        if ((tmp_10_fu_721_p3 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter1_state17_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_condition_pp2_exit_iter1_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter1_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(tmp_11_fu_879_p3, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_11_fu_879_p3 = ap_const_lv1_1))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        ap_return <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_1130_p3),32));

    ashr_ln586_fu_561_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_498_p3),to_integer(unsigned('0' & zext_ln586_fu_557_p1(31-1 downto 0)))));
    empty_38_fu_763_p1 <= k_reg_339(5 - 1 downto 0);
    empty_40_fu_910_p1 <= k_1_reg_363(5 - 1 downto 0);
    exp_tmp_fu_451_p4 <= ireg_fu_435_p1(62 downto 52);

    fp_input_img_V_address0_assign_proc : process(ap_CS_fsm_state1, i_cast_reg_1151_pp0_iter2_reg, ap_enable_reg_pp0_iter3, grp_hwmm_layer1_fu_402_input_r_address0, ap_CS_fsm_state8, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fp_input_img_V_address0 <= i_cast_reg_1151_pp0_iter2_reg(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fp_input_img_V_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fp_input_img_V_address0 <= grp_hwmm_layer1_fu_402_input_r_address0;
        else 
            fp_input_img_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    fp_input_img_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3, grp_hwmm_layer1_fu_402_input_r_ce0, ap_CS_fsm_state8)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            fp_input_img_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fp_input_img_V_ce0 <= grp_hwmm_layer1_fu_402_input_r_ce0;
        else 
            fp_input_img_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fp_input_img_V_ce1_assign_proc : process(grp_hwmm_layer1_fu_402_input_r_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            fp_input_img_V_ce1 <= grp_hwmm_layer1_fu_402_input_r_ce1;
        else 
            fp_input_img_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fp_input_img_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, select_ln571_4_fu_692_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fp_input_img_V_d0 <= select_ln571_4_fu_692_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fp_input_img_V_d0 <= ap_const_lv32_1000000;
        else 
            fp_input_img_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fp_input_img_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp0_stage0_11001, icmp_ln5_reg_1147_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if ((((icmp_ln5_reg_1147_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            fp_input_img_V_we0 <= ap_const_logic_1;
        else 
            fp_input_img_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1377_ce_assign_proc : process(ap_CS_fsm_state11, grp_hw_act_layer1_fu_387_grp_fu_1377_p_ce, grp_hw_act_layer2_fu_392_grp_fu_1377_p_ce, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1377_ce <= grp_hw_act_layer2_fu_392_grp_fu_1377_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_1377_ce <= grp_hw_act_layer1_fu_387_grp_fu_1377_p_ce;
        else 
            grp_fu_1377_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1377_opcode_assign_proc : process(ap_CS_fsm_state11, grp_hw_act_layer1_fu_387_grp_fu_1377_p_opcode, grp_hw_act_layer2_fu_392_grp_fu_1377_p_opcode, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1377_opcode <= grp_hw_act_layer2_fu_392_grp_fu_1377_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_1377_opcode <= grp_hw_act_layer1_fu_387_grp_fu_1377_p_opcode;
        end if; 
    end process;


    grp_fu_1377_p0_assign_proc : process(ap_CS_fsm_state11, grp_hw_act_layer1_fu_387_grp_fu_1377_p_din0, grp_hw_act_layer2_fu_392_grp_fu_1377_p_din0, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1377_p0 <= grp_hw_act_layer2_fu_392_grp_fu_1377_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_1377_p0 <= grp_hw_act_layer1_fu_387_grp_fu_1377_p_din0;
        end if; 
    end process;


    grp_fu_1377_p1_assign_proc : process(ap_CS_fsm_state11, grp_hw_act_layer1_fu_387_grp_fu_1377_p_din1, grp_hw_act_layer2_fu_392_grp_fu_1377_p_din1, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1377_p1 <= grp_hw_act_layer2_fu_392_grp_fu_1377_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_1377_p1 <= grp_hw_act_layer1_fu_387_grp_fu_1377_p_din1;
        end if; 
    end process;


    grp_fu_1381_ce_assign_proc : process(ap_CS_fsm_state11, grp_hw_act_layer1_fu_387_grp_fu_1381_p_ce, grp_hw_act_layer2_fu_392_grp_fu_1381_p_ce, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1381_ce <= grp_hw_act_layer2_fu_392_grp_fu_1381_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_1381_ce <= grp_hw_act_layer1_fu_387_grp_fu_1381_p_ce;
        else 
            grp_fu_1381_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1381_opcode_assign_proc : process(ap_CS_fsm_state11, grp_hw_act_layer1_fu_387_grp_fu_1381_p_opcode, grp_hw_act_layer2_fu_392_grp_fu_1381_p_opcode, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1381_opcode <= grp_hw_act_layer2_fu_392_grp_fu_1381_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_1381_opcode <= grp_hw_act_layer1_fu_387_grp_fu_1381_p_opcode;
        end if; 
    end process;


    grp_fu_1381_p0_assign_proc : process(ap_CS_fsm_state11, grp_hw_act_layer1_fu_387_grp_fu_1381_p_din0, grp_hw_act_layer2_fu_392_grp_fu_1381_p_din0, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1381_p0 <= grp_hw_act_layer2_fu_392_grp_fu_1381_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_1381_p0 <= grp_hw_act_layer1_fu_387_grp_fu_1381_p_din0;
        end if; 
    end process;


    grp_fu_1381_p1_assign_proc : process(ap_CS_fsm_state11, grp_hw_act_layer1_fu_387_grp_fu_1381_p_din1, grp_hw_act_layer2_fu_392_grp_fu_1381_p_din1, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1381_p1 <= grp_hw_act_layer2_fu_392_grp_fu_1381_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_1381_p1 <= grp_hw_act_layer1_fu_387_grp_fu_1381_p_din1;
        end if; 
    end process;

    grp_fu_410_p0 <= input_img_q0;
    grp_hw_act_layer1_fu_387_ap_start <= grp_hw_act_layer1_fu_387_ap_start_reg;
    grp_hw_act_layer1_fu_387_grp_fu_1377_p_dout0 <= grp_fu_1377_p2;
    grp_hw_act_layer1_fu_387_grp_fu_1381_p_dout0 <= grp_fu_1381_p2;
    grp_hw_act_layer2_fu_392_ap_start <= grp_hw_act_layer2_fu_392_ap_start_reg;
    grp_hw_act_layer2_fu_392_grp_fu_1377_p_dout0 <= grp_fu_1377_p2;
    grp_hw_act_layer2_fu_392_grp_fu_1381_p_dout0 <= grp_fu_1381_p2;
    grp_hwmm_layer1_fu_402_ap_start <= grp_hwmm_layer1_fu_402_ap_start_reg;
    grp_hwmm_layer3_fu_397_ap_start <= grp_hwmm_layer3_fu_397_ap_start_reg;
    i_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_316),64));
    icmp_ln1494_1_fu_1047_p2 <= "1" when (signed(temp_output3_0_1_V_reg_1332) > signed(max_val_V_fu_1040_p3)) else "0";
    icmp_ln1494_2_fu_1059_p2 <= "1" when (signed(temp_output3_0_2_V_reg_1338) > signed(max_val_V_2_fu_1052_p3)) else "0";
    icmp_ln1494_3_fu_1071_p2 <= "1" when (signed(temp_output3_0_3_V_reg_1344) > signed(max_val_V_3_fu_1064_p3)) else "0";
    icmp_ln1494_4_fu_1083_p2 <= "1" when (signed(call_ret_reg_1321_4) > signed(max_val_V_5_fu_1076_p3)) else "0";
    icmp_ln1494_fu_1035_p2 <= "1" when (signed(temp_output3_0_0_V_reg_1326) > signed(ap_const_lv32_82000000)) else "0";
    icmp_ln571_fu_469_p2 <= "1" when (trunc_ln555_fu_439_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_505_p2 <= "1" when (signed(F2_reg_1189) > signed(ap_const_lv12_18)) else "0";
    icmp_ln582_fu_532_p2 <= "1" when (F2_reg_1189 = ap_const_lv12_18) else "0";
    icmp_ln585_fu_620_p2 <= "1" when (unsigned(sh_amt_fu_520_p3) > unsigned(ap_const_lv12_35)) else "0";
    icmp_ln5_fu_419_p2 <= "1" when (i_reg_316 = ap_const_lv10_300) else "0";
    icmp_ln603_fu_551_p2 <= "1" when (tmp_fu_541_p4 = ap_const_lv7_0) else "0";
    input_img_address0 <= i_cast_fu_425_p1(10 - 1 downto 0);

    input_img_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_img_ce0 <= ap_const_logic_1;
        else 
            input_img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ireg_fu_435_p1 <= grp_fu_410_p1;
    k_1_cast38_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_363),64));
    k_cast37_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_339),64));
    lhs_1_fu_809_p3 <= (sum_V_4_reg_350 & ap_const_lv24_0);
    lhs_2_fu_846_p3 <= (tmp_6_fu_836_p4 & ap_const_lv24_0);
    lhs_4_fu_949_p3 <= (sum_V_5_reg_374 & ap_const_lv24_0);
    lhs_5_fu_986_p3 <= (tmp_9_fu_976_p4 & ap_const_lv24_0);
    man_V_1_fu_492_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_488_p1));
    man_V_2_fu_498_p3 <= 
        man_V_1_fu_492_p2 when (p_Result_s_reg_1171(0) = '1') else 
        zext_ln569_fu_488_p1;
    max_val_V_2_fu_1052_p3 <= 
        temp_output3_0_1_V_reg_1332 when (icmp_ln1494_1_fu_1047_p2(0) = '1') else 
        max_val_V_fu_1040_p3;
    max_val_V_3_fu_1064_p3 <= 
        temp_output3_0_2_V_reg_1338 when (icmp_ln1494_2_fu_1059_p2(0) = '1') else 
        max_val_V_2_fu_1052_p3;
    max_val_V_5_fu_1076_p3 <= 
        temp_output3_0_3_V_reg_1344 when (icmp_ln1494_3_fu_1071_p2(0) = '1') else 
        max_val_V_3_fu_1064_p3;
    max_val_V_fu_1040_p3 <= 
        temp_output3_0_0_V_reg_1326 when (icmp_ln1494_fu_1035_p2(0) = '1') else 
        ap_const_lv32_82000000;
    or_ln118_1_fu_1093_p2 <= (icmp_ln1494_4_reg_1371 or icmp_ln1494_3_reg_1366);
    or_ln118_fu_1089_p2 <= (icmp_ln1494_2_reg_1360 or icmp_ln1494_1_reg_1355);
    or_ln42_fu_870_p2 <= (trunc_ln42_reg_1211 or ap_const_lv4_1);
    or_ln46_1_fu_914_p2 <= (empty_40_fu_910_p1 or ap_const_lv5_1);
    or_ln46_fu_781_p2 <= (empty_38_reg_1230 or ap_const_lv5_1);
    or_ln571_1_fu_686_p2 <= (or_ln571_fu_657_p2 or and_ln581_fu_614_p2);
    or_ln571_fu_657_p2 <= (icmp_ln571_reg_1181 or and_ln603_fu_644_p2);
    or_ln581_fu_632_p2 <= (or_ln582_fu_603_p2 or icmp_ln581_fu_505_p2);
    or_ln582_fu_603_p2 <= (icmp_ln582_fu_532_p2 or icmp_ln571_reg_1181);
    p_Result_1_fu_481_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_1176);
    ret_V_1_fu_817_p2 <= std_logic_vector(unsigned(lhs_1_fu_809_p3) + unsigned(r_V_1_reg_1240));
    ret_V_2_fu_854_p2 <= std_logic_vector(unsigned(lhs_2_fu_846_p3) + unsigned(r_V_3_fu_830_p2));
    ret_V_3_fu_957_p2 <= std_logic_vector(unsigned(lhs_4_fu_949_p3) + unsigned(r_V_5_reg_1296));
    ret_V_4_fu_994_p2 <= std_logic_vector(unsigned(lhs_5_fu_986_p3) + unsigned(r_V_7_fu_970_p2));
    ret_V_fu_1130_p3 <= 
        select_ln118_fu_1097_p3 when (or_ln118_1_fu_1093_p2(0) = '1') else 
        sext_ln835_fu_1126_p1;
    select_ln114_fu_1111_p3 <= 
        ap_const_lv3_0 when (icmp_ln1494_reg_1350(0) = '1') else 
        ap_const_lv3_7;
    select_ln118_1_fu_1104_p3 <= 
        ap_const_lv3_2 when (icmp_ln1494_2_reg_1360(0) = '1') else 
        ap_const_lv3_1;
    select_ln118_2_fu_1118_p3 <= 
        select_ln118_1_fu_1104_p3 when (or_ln118_fu_1089_p2(0) = '1') else 
        select_ln114_fu_1111_p3;
    select_ln118_fu_1097_p3 <= 
        ap_const_lv4_4 when (icmp_ln1494_4_reg_1371(0) = '1') else 
        ap_const_lv4_3;
    select_ln571_1_fu_662_p3 <= 
        select_ln588_fu_578_p3 when (and_ln585_fu_626_p2(0) = '1') else 
        trunc_ln586_fu_567_p1;
    select_ln571_2_fu_670_p3 <= 
        trunc_ln583_fu_537_p1 when (and_ln582_fu_597_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln571_3_fu_678_p3 <= 
        select_ln571_fu_650_p3 when (or_ln571_fu_657_p2(0) = '1') else 
        select_ln571_1_fu_662_p3;
    select_ln571_4_fu_692_p3 <= 
        select_ln571_3_fu_678_p3 when (or_ln571_1_fu_686_p2(0) = '1') else 
        select_ln571_2_fu_670_p3;
    select_ln571_fu_650_p3 <= 
        ap_const_lv32_0 when (icmp_ln571_reg_1181(0) = '1') else 
        shl_ln604_fu_586_p2;
    select_ln588_fu_578_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_1_fu_571_p3(0) = '1') else 
        ap_const_lv32_0;
        sext_ln581_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_520_p3),32));

        sext_ln835_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln118_2_fu_1118_p3),4));

    sh_amt_fu_520_p3 <= 
        add_ln581_fu_510_p2 when (icmp_ln581_fu_505_p2(0) = '1') else 
        sub_ln581_fu_515_p2;
    shl_ln604_fu_586_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_537_p1),to_integer(unsigned('0' & sext_ln581_fu_528_p1(31-1 downto 0)))));
    sub_ln581_fu_515_p2 <= std_logic_vector(unsigned(ap_const_lv12_18) - unsigned(F2_reg_1189));

    temp_output2_0_V_address0_assign_proc : process(zext_ln42_reg_1201, ap_CS_fsm_state15, zext_ln46_reg_1266, ap_CS_fsm_state19, ap_CS_fsm_state22, grp_hw_act_layer2_fu_392_output_0_V_address0, grp_hwmm_layer3_fu_397_input_0_address0, ap_CS_fsm_state20, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp_output2_0_V_address0 <= zext_ln46_reg_1266(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_output2_0_V_address0 <= zext_ln42_reg_1201(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output2_0_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            temp_output2_0_V_address0 <= grp_hwmm_layer3_fu_397_input_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output2_0_V_address0 <= grp_hw_act_layer2_fu_392_output_0_V_address0;
        else 
            temp_output2_0_V_address0 <= "XXXX";
        end if; 
    end process;


    temp_output2_0_V_address1_assign_proc : process(ap_CS_fsm_state22, grp_hw_act_layer2_fu_392_output_0_V_address1, grp_hwmm_layer3_fu_397_input_0_address1, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            temp_output2_0_V_address1 <= grp_hwmm_layer3_fu_397_input_0_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output2_0_V_address1 <= grp_hw_act_layer2_fu_392_output_0_V_address1;
        else 
            temp_output2_0_V_address1 <= "XXXX";
        end if; 
    end process;


    temp_output2_0_V_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state22, grp_hw_act_layer2_fu_392_output_0_V_ce0, grp_hwmm_layer3_fu_397_input_0_ce0, ap_CS_fsm_state20, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            temp_output2_0_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            temp_output2_0_V_ce0 <= grp_hwmm_layer3_fu_397_input_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output2_0_V_ce0 <= grp_hw_act_layer2_fu_392_output_0_V_ce0;
        else 
            temp_output2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output2_0_V_ce1_assign_proc : process(ap_CS_fsm_state22, grp_hw_act_layer2_fu_392_output_0_V_ce1, grp_hwmm_layer3_fu_397_input_0_ce1, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            temp_output2_0_V_ce1 <= grp_hwmm_layer3_fu_397_input_0_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output2_0_V_ce1 <= grp_hw_act_layer2_fu_392_output_0_V_ce1;
        else 
            temp_output2_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output2_0_V_d0_assign_proc : process(sum_V_4_reg_350, sum_V_5_reg_374, ap_CS_fsm_state15, ap_CS_fsm_state19, grp_hw_act_layer2_fu_392_output_0_V_d0, ap_CS_fsm_state20, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp_output2_0_V_d0 <= sum_V_5_reg_374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_output2_0_V_d0 <= sum_V_4_reg_350;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output2_0_V_d0 <= ap_const_lv32_1000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output2_0_V_d0 <= grp_hw_act_layer2_fu_392_output_0_V_d0;
        else 
            temp_output2_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_output2_0_V_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state19, grp_hw_act_layer2_fu_392_output_0_V_we0, ap_CS_fsm_state20, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            temp_output2_0_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output2_0_V_we0 <= grp_hw_act_layer2_fu_392_output_0_V_we0;
        else 
            temp_output2_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output2_0_V_we1_assign_proc : process(grp_hw_act_layer2_fu_392_output_0_V_we1, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_output2_0_V_we1 <= grp_hw_act_layer2_fu_392_output_0_V_we1;
        else 
            temp_output2_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, grp_hw_act_layer1_fu_387_output_0_V_address0, grp_hwmm_layer1_fu_402_output_0_address0, ap_CS_fsm_state10, ap_block_pp2_stage0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_block_pp1_stage0, zext_ln44_fu_786_p1, k_1_cast38_fu_893_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            temp_output_0_V_address0 <= k_1_cast38_fu_893_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            temp_output_0_V_address0 <= zext_ln44_fu_786_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_V_address0 <= grp_hwmm_layer1_fu_402_output_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_address0 <= grp_hw_act_layer1_fu_387_output_0_V_address0;
        else 
            temp_output_0_V_address0 <= "XXXXX";
        end if; 
    end process;


    temp_output_0_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, grp_hw_act_layer1_fu_387_output_0_V_address1, ap_CS_fsm_state10, ap_block_pp2_stage0, ap_block_pp1_stage0, k_cast37_fu_735_p1, zext_ln44_1_fu_934_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            temp_output_0_V_address1 <= zext_ln44_1_fu_934_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            temp_output_0_V_address1 <= k_cast37_fu_735_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_address1 <= grp_hw_act_layer1_fu_387_output_0_V_address1;
        else 
            temp_output_0_V_address1 <= "XXXXX";
        end if; 
    end process;


    temp_output_0_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, grp_hw_act_layer1_fu_387_output_0_V_ce0, grp_hwmm_layer1_fu_402_output_0_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            temp_output_0_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_V_ce0 <= grp_hwmm_layer1_fu_402_output_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_ce0 <= grp_hw_act_layer1_fu_387_output_0_V_ce0;
        else 
            temp_output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, grp_hw_act_layer1_fu_387_output_0_V_ce1, ap_CS_fsm_state10)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            temp_output_0_V_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_ce1 <= grp_hw_act_layer1_fu_387_output_0_V_ce1;
        else 
            temp_output_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_V_d0_assign_proc : process(grp_hw_act_layer1_fu_387_output_0_V_d0, grp_hwmm_layer1_fu_402_output_0_d0, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_V_d0 <= ap_const_lv32_1000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_V_d0 <= grp_hwmm_layer1_fu_402_output_0_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_d0 <= grp_hw_act_layer1_fu_387_output_0_V_d0;
        else 
            temp_output_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_output_0_V_we0_assign_proc : process(grp_hw_act_layer1_fu_387_output_0_V_we0, grp_hwmm_layer1_fu_402_output_0_we0, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_output_0_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_output_0_V_we0 <= grp_hwmm_layer1_fu_402_output_0_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_we0 <= grp_hw_act_layer1_fu_387_output_0_V_we0;
        else 
            temp_output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_0_V_we1_assign_proc : process(grp_hw_act_layer1_fu_387_output_0_V_we1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_output_0_V_we1 <= grp_hw_act_layer1_fu_387_output_0_V_we1;
        else 
            temp_output_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_721_p3 <= k_reg_339(5 downto 5);
    tmp_11_fu_879_p3 <= k_1_reg_363(5 downto 5);
    tmp_1_fu_571_p3 <= input_img_load_reg_1161_pp0_iter2_reg(31 downto 31);
    tmp_2_fu_701_p3 <= j_reg_327(4 downto 4);
    tmp_3_fu_740_p4 <= k_reg_339(5 downto 1);
    tmp_4_fu_750_p3 <= (tmp_3_fu_740_p4 & j_reg_327);
    tmp_5_fu_791_p3 <= (or_ln46_fu_781_p2 & ap_const_lv4_0);
    tmp_6_fu_836_p4 <= ret_V_1_fu_817_p2(55 downto 24);
    tmp_7_fu_898_p3 <= (k_1_reg_363 & or_ln42_reg_1260);
    tmp_8_fu_938_p3 <= (or_ln46_1_reg_1290 & or_ln42_reg_1260);
    tmp_9_fu_976_p4 <= ret_V_3_fu_957_p2(55 downto 24);
    tmp_fu_541_p4 <= sh_amt_fu_520_p3(11 downto 5);
    trunc_ln42_fu_717_p1 <= j_reg_327(4 - 1 downto 0);
    trunc_ln555_fu_439_p1 <= ireg_fu_435_p1(63 - 1 downto 0);
    trunc_ln565_fu_465_p1 <= ireg_fu_435_p1(52 - 1 downto 0);
    trunc_ln583_fu_537_p1 <= man_V_2_fu_498_p3(32 - 1 downto 0);
    trunc_ln586_fu_567_p1 <= ashr_ln586_fu_561_p2(32 - 1 downto 0);

    weights_layer2_weights_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_block_pp1_stage0, zext_ln1118_1_fu_804_p1, zext_ln1118_3_fu_944_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            weights_layer2_weights_V_address0 <= zext_ln1118_3_fu_944_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            weights_layer2_weights_V_address0 <= zext_ln1118_1_fu_804_p1(9 - 1 downto 0);
        else 
            weights_layer2_weights_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    weights_layer2_weights_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, zext_ln1118_fu_758_p1, ap_block_pp1_stage0, zext_ln1118_2_fu_905_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            weights_layer2_weights_V_address1 <= zext_ln1118_2_fu_905_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            weights_layer2_weights_V_address1 <= zext_ln1118_fu_758_p1(9 - 1 downto 0);
        else 
            weights_layer2_weights_V_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    weights_layer2_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            weights_layer2_weights_V_ce0 <= ap_const_logic_1;
        else 
            weights_layer2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_layer2_weights_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            weights_layer2_weights_V_ce1 <= ap_const_logic_1;
        else 
            weights_layer2_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln571_fu_592_p2 <= (icmp_ln571_reg_1181 xor ap_const_lv1_1);
    xor_ln581_fu_638_p2 <= (or_ln581_fu_632_p2 xor ap_const_lv1_1);
    xor_ln582_fu_608_p2 <= (or_ln582_fu_603_p2 xor ap_const_lv1_1);
    zext_ln1118_1_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_fu_799_p2),64));
    zext_ln1118_2_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_898_p3),64));
    zext_ln1118_3_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_938_p3),64));
    zext_ln1118_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_750_p3),64));
    zext_ln42_1_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_327),9));
    zext_ln42_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_327),64));
    zext_ln44_1_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln46_1_reg_1290),64));
    zext_ln44_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln46_fu_781_p2),64));
    zext_ln455_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_fu_451_p4),12));
    zext_ln46_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln42_fu_870_p2),64));
    zext_ln569_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_481_p3),54));
    zext_ln586_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_528_p1),54));
end behav;
