// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nn_inference_hwmm_layer1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_pp0_stage0 = 10'd4;
parameter    ap_ST_fsm_state6 = 10'd8;
parameter    ap_ST_fsm_pp1_stage0 = 10'd16;
parameter    ap_ST_fsm_state10 = 10'd32;
parameter    ap_ST_fsm_pp2_stage0 = 10'd64;
parameter    ap_ST_fsm_state14 = 10'd128;
parameter    ap_ST_fsm_pp3_stage0 = 10'd256;
parameter    ap_ST_fsm_state18 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [4:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] input_r_address0;
reg input_r_ce0;
reg[9:0] input_r_address1;
reg input_r_ce1;
reg[4:0] output_0_address0;
reg output_0_ce0;
reg output_0_we0;
reg[31:0] output_0_d0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] weights_layer1_weights_V_address0;
reg    weights_layer1_weights_V_ce0;
wire  signed [24:0] weights_layer1_weights_V_q0;
reg   [14:0] weights_layer1_weights_V_address1;
reg    weights_layer1_weights_V_ce1;
wire  signed [24:0] weights_layer1_weights_V_q1;
reg   [9:0] k_reg_267;
reg   [31:0] sum_V_17_reg_278;
reg   [9:0] k_2_reg_291;
reg   [31:0] sum_V_18_reg_302;
reg   [9:0] k_3_reg_315;
reg   [31:0] sum_V_19_reg_326;
reg   [9:0] k_4_reg_339;
reg   [31:0] sum_V_20_reg_350;
wire   [0:0] tmp_fu_363_p3;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln21_fu_371_p1;
reg   [63:0] zext_ln21_reg_937;
wire   [14:0] zext_ln21_1_fu_375_p1;
reg   [14:0] zext_ln21_1_reg_942;
wire   [4:0] trunc_ln21_fu_379_p1;
reg   [4:0] trunc_ln21_reg_947;
wire   [0:0] icmp_ln25_fu_383_p2;
reg   [0:0] icmp_ln25_reg_954;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln25_reg_954_pp0_iter1_reg;
wire   [9:0] add_ln25_fu_389_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] or_ln25_fu_423_p2;
reg   [9:0] or_ln25_reg_973;
wire   [55:0] r_V_103_fu_437_p2;
reg   [55:0] r_V_103_reg_979;
reg    ap_enable_reg_pp0_iter2;
wire   [4:0] or_ln21_fu_525_p2;
reg   [4:0] or_ln21_reg_999;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln25_fu_530_p1;
reg   [63:0] zext_ln25_reg_1005;
wire   [0:0] icmp_ln25_1_fu_534_p2;
reg   [0:0] icmp_ln25_1_reg_1010;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln25_1_reg_1010_pp1_iter1_reg;
wire   [9:0] add_ln25_1_fu_540_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [9:0] or_ln25_1_fu_563_p2;
reg   [9:0] or_ln25_1_reg_1029;
wire   [55:0] r_V_107_fu_577_p2;
reg   [55:0] r_V_107_reg_1035;
reg    ap_enable_reg_pp1_iter2;
wire   [4:0] or_ln21_1_fu_659_p2;
reg   [4:0] or_ln21_1_reg_1055;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln25_1_fu_664_p1;
reg   [63:0] zext_ln25_1_reg_1061;
wire   [0:0] icmp_ln25_2_fu_668_p2;
reg   [0:0] icmp_ln25_2_reg_1066;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state11_pp2_stage0_iter0;
wire    ap_block_state12_pp2_stage0_iter1;
wire    ap_block_state13_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln25_2_reg_1066_pp2_iter1_reg;
wire   [9:0] add_ln25_2_fu_674_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [9:0] or_ln25_2_fu_697_p2;
reg   [9:0] or_ln25_2_reg_1085;
wire   [55:0] r_V_111_fu_711_p2;
reg   [55:0] r_V_111_reg_1091;
reg    ap_enable_reg_pp2_iter2;
wire   [4:0] or_ln21_2_fu_793_p2;
reg   [4:0] or_ln21_2_reg_1111;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln25_2_fu_798_p1;
reg   [63:0] zext_ln25_2_reg_1117;
wire   [0:0] icmp_ln25_3_fu_802_p2;
reg   [0:0] icmp_ln25_3_reg_1122;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state15_pp3_stage0_iter0;
wire    ap_block_state16_pp3_stage0_iter1;
wire    ap_block_state17_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln25_3_reg_1122_pp3_iter1_reg;
wire   [9:0] add_ln25_3_fu_808_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [9:0] or_ln25_3_fu_831_p2;
reg   [9:0] or_ln25_3_reg_1141;
wire   [55:0] r_V_115_fu_845_p2;
reg   [55:0] r_V_115_reg_1147;
reg    ap_enable_reg_pp3_iter2;
wire   [5:0] add_ln21_fu_927_p2;
wire    ap_CS_fsm_state18;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state11;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_enable_reg_pp3_iter1;
reg    ap_condition_pp3_exit_iter1_state16;
reg   [5:0] j_reg_255;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln1118_fu_418_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] k_cast3_fu_395_p1;
wire   [63:0] zext_ln1118_4_fu_459_p1;
wire   [63:0] zext_ln23_fu_443_p1;
wire   [63:0] zext_ln1118_5_fu_558_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] k_2_cast4_fu_546_p1;
wire   [63:0] zext_ln1118_6_fu_593_p1;
wire   [63:0] zext_ln23_1_fu_583_p1;
wire   [63:0] zext_ln1118_7_fu_692_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] k_3_cast5_fu_680_p1;
wire   [63:0] zext_ln1118_8_fu_727_p1;
wire   [63:0] zext_ln23_2_fu_717_p1;
wire   [63:0] zext_ln1118_9_fu_826_p1;
wire   [63:0] k_4_cast6_fu_814_p1;
wire   [63:0] zext_ln1118_10_fu_861_p1;
wire   [63:0] zext_ln23_3_fu_851_p1;
wire   [8:0] tmp_s_fu_400_p4;
wire   [14:0] tmp_72_fu_410_p3;
wire   [14:0] tmp_73_fu_447_p3;
wire   [14:0] add_ln1118_fu_454_p2;
wire   [55:0] lhs_80_fu_464_p3;
wire   [55:0] ret_V_fu_472_p2;
wire   [31:0] tmp_74_fu_491_p4;
wire   [55:0] lhs_81_fu_501_p3;
wire   [55:0] r_V_105_fu_485_p2;
wire   [55:0] ret_V_79_fu_509_p2;
wire   [14:0] tmp_75_fu_551_p3;
wire   [14:0] tmp_76_fu_587_p3;
wire   [55:0] lhs_83_fu_598_p3;
wire   [55:0] ret_V_80_fu_606_p2;
wire   [31:0] tmp_77_fu_625_p4;
wire   [55:0] lhs_84_fu_635_p3;
wire   [55:0] r_V_109_fu_619_p2;
wire   [55:0] ret_V_81_fu_643_p2;
wire   [14:0] tmp_78_fu_685_p3;
wire   [14:0] tmp_79_fu_721_p3;
wire   [55:0] lhs_86_fu_732_p3;
wire   [55:0] ret_V_82_fu_740_p2;
wire   [31:0] tmp_80_fu_759_p4;
wire   [55:0] lhs_87_fu_769_p3;
wire   [55:0] r_V_113_fu_753_p2;
wire   [55:0] ret_V_83_fu_777_p2;
wire   [14:0] tmp_81_fu_819_p3;
wire   [14:0] tmp_82_fu_855_p3;
wire   [55:0] lhs_89_fu_866_p3;
wire   [55:0] ret_V_84_fu_874_p2;
wire   [31:0] tmp_83_fu_893_p4;
wire   [55:0] lhs_90_fu_903_p3;
wire   [55:0] r_V_117_fu_887_p2;
wire   [55:0] ret_V_85_fu_911_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
end

nn_inference_hwmm_layer1_weights_layer1_weights_V #(
    .DataWidth( 25 ),
    .AddressRange( 24576 ),
    .AddressWidth( 15 ))
weights_layer1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_layer1_weights_V_address0),
    .ce0(weights_layer1_weights_V_ce0),
    .q0(weights_layer1_weights_V_q0),
    .address1(weights_layer1_weights_V_address1),
    .ce1(weights_layer1_weights_V_ce1),
    .q1(weights_layer1_weights_V_q1)
);

nn_inference_mul_25s_32s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 56 ))
mul_25s_32s_56_1_1_U1(
    .din0(weights_layer1_weights_V_q1),
    .din1(input_r_q1),
    .dout(r_V_103_fu_437_p2)
);

nn_inference_mul_25s_32s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 56 ))
mul_25s_32s_56_1_1_U2(
    .din0(weights_layer1_weights_V_q0),
    .din1(input_r_q0),
    .dout(r_V_105_fu_485_p2)
);

nn_inference_mul_25s_32s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 56 ))
mul_25s_32s_56_1_1_U3(
    .din0(weights_layer1_weights_V_q1),
    .din1(input_r_q1),
    .dout(r_V_107_fu_577_p2)
);

nn_inference_mul_25s_32s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 56 ))
mul_25s_32s_56_1_1_U4(
    .din0(weights_layer1_weights_V_q0),
    .din1(input_r_q0),
    .dout(r_V_109_fu_619_p2)
);

nn_inference_mul_25s_32s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 56 ))
mul_25s_32s_56_1_1_U5(
    .din0(weights_layer1_weights_V_q1),
    .din1(input_r_q1),
    .dout(r_V_111_fu_711_p2)
);

nn_inference_mul_25s_32s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 56 ))
mul_25s_32s_56_1_1_U6(
    .din0(weights_layer1_weights_V_q0),
    .din1(input_r_q0),
    .dout(r_V_113_fu_753_p2)
);

nn_inference_mul_25s_32s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 56 ))
mul_25s_32s_56_1_1_U7(
    .din0(weights_layer1_weights_V_q1),
    .din1(input_r_q1),
    .dout(r_V_115_fu_845_p2)
);

nn_inference_mul_25s_32s_56_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 56 ))
mul_25s_32s_56_1_1_U8(
    .din0(weights_layer1_weights_V_q0),
    .din1(input_r_q0),
    .dout(r_V_117_fu_887_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_fu_363_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((tmp_fu_363_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state11)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == ap_CS_fsm_state14) | ((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_condition_pp3_exit_iter1_state16) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter1_state16) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_255 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j_reg_255 <= add_ln21_fu_927_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_2_reg_291 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_1_fu_534_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        k_2_reg_291 <= add_ln25_1_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k_3_reg_315 <= 10'd0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln25_2_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        k_3_reg_315 <= add_ln25_2_fu_674_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        k_4_reg_339 <= 10'd0;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln25_3_fu_802_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        k_4_reg_339 <= add_ln25_3_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_363_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_267 <= 10'd0;
    end else if (((icmp_ln25_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_267 <= add_ln25_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_363_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_V_17_reg_278 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln25_reg_954_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_V_17_reg_278 <= {{ret_V_79_fu_509_p2[55:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sum_V_18_reg_302 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln25_1_reg_1010_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_V_18_reg_302 <= {{ret_V_81_fu_643_p2[55:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_V_19_reg_326 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln25_2_reg_1066_pp2_iter1_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        sum_V_19_reg_326 <= {{ret_V_83_fu_777_p2[55:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sum_V_20_reg_350 <= 32'd0;
    end else if (((ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln25_3_reg_1122_pp3_iter1_reg == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        sum_V_20_reg_350 <= {{ret_V_85_fu_911_p2[55:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln25_1_reg_1010 <= icmp_ln25_1_fu_534_p2;
        icmp_ln25_1_reg_1010_pp1_iter1_reg <= icmp_ln25_1_reg_1010;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln25_2_reg_1066 <= icmp_ln25_2_fu_668_p2;
        icmp_ln25_2_reg_1066_pp2_iter1_reg <= icmp_ln25_2_reg_1066;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln25_3_reg_1122 <= icmp_ln25_3_fu_802_p2;
        icmp_ln25_3_reg_1122_pp3_iter1_reg <= icmp_ln25_3_reg_1122;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln25_reg_954 <= icmp_ln25_fu_383_p2;
        icmp_ln25_reg_954_pp0_iter1_reg <= icmp_ln25_reg_954;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        or_ln21_1_reg_1055[0] <= or_ln21_1_fu_659_p2[0];
or_ln21_1_reg_1055[4 : 2] <= or_ln21_1_fu_659_p2[4 : 2];
        zext_ln25_1_reg_1061[0] <= zext_ln25_1_fu_664_p1[0];
zext_ln25_1_reg_1061[4 : 2] <= zext_ln25_1_fu_664_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        or_ln21_2_reg_1111[4 : 2] <= or_ln21_2_fu_793_p2[4 : 2];
        zext_ln25_2_reg_1117[4 : 2] <= zext_ln25_2_fu_798_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        or_ln21_reg_999[4 : 1] <= or_ln21_fu_525_p2[4 : 1];
        zext_ln25_reg_1005[4 : 1] <= zext_ln25_fu_530_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_1_fu_534_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        or_ln25_1_reg_1029[9 : 1] <= or_ln25_1_fu_563_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_2_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        or_ln25_2_reg_1085[9 : 1] <= or_ln25_2_fu_697_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_3_fu_802_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        or_ln25_3_reg_1141[9 : 1] <= or_ln25_3_fu_831_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln25_reg_973[9 : 1] <= or_ln25_fu_423_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_954 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_103_reg_979 <= r_V_103_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_1_reg_1010 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        r_V_107_reg_1035 <= r_V_107_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_2_reg_1066 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        r_V_111_reg_1091 <= r_V_111_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_3_reg_1122 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        r_V_115_reg_1147 <= r_V_115_fu_845_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_363_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln21_reg_947 <= trunc_ln21_fu_379_p1;
        zext_ln21_1_reg_942[5 : 0] <= zext_ln21_1_fu_375_p1[5 : 0];
        zext_ln21_reg_937[5 : 0] <= zext_ln21_fu_371_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_383_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_1_fu_534_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_2_fu_668_p2 == 1'd0)) begin
        ap_condition_pp2_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_condition_pp3_exit_iter1_state16 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter1_state16 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_3_fu_802_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_fu_363_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_363_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        input_r_address0 = zext_ln23_3_fu_851_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        input_r_address0 = zext_ln23_2_fu_717_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        input_r_address0 = zext_ln23_1_fu_583_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_r_address0 = zext_ln23_fu_443_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        input_r_address1 = k_4_cast6_fu_814_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        input_r_address1 = k_3_cast5_fu_680_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        input_r_address1 = k_2_cast4_fu_546_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        input_r_address1 = k_cast3_fu_395_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_0_address0 = zext_ln25_2_reg_1117;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_address0 = zext_ln25_1_reg_1061;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_0_address0 = zext_ln25_reg_1005;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_0_address0 = zext_ln21_reg_937;
    end else begin
        output_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_0_d0 = sum_V_20_reg_350;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_0_d0 = sum_V_19_reg_326;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_0_d0 = sum_V_18_reg_302;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_0_d0 = sum_V_17_reg_278;
    end else begin
        output_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        weights_layer1_weights_V_address0 = zext_ln1118_10_fu_861_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        weights_layer1_weights_V_address0 = zext_ln1118_8_fu_727_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        weights_layer1_weights_V_address0 = zext_ln1118_6_fu_593_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        weights_layer1_weights_V_address0 = zext_ln1118_4_fu_459_p1;
    end else begin
        weights_layer1_weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        weights_layer1_weights_V_address1 = zext_ln1118_9_fu_826_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        weights_layer1_weights_V_address1 = zext_ln1118_7_fu_692_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        weights_layer1_weights_V_address1 = zext_ln1118_5_fu_558_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        weights_layer1_weights_V_address1 = zext_ln1118_fu_418_p1;
    end else begin
        weights_layer1_weights_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        weights_layer1_weights_V_ce0 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        weights_layer1_weights_V_ce1 = 1'b1;
    end else begin
        weights_layer1_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_363_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln25_fu_383_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln25_fu_383_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_1_fu_534_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_1_fu_534_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln25_2_fu_668_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln25_2_fu_668_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1118_fu_454_p2 = (tmp_73_fu_447_p3 + zext_ln21_1_reg_942);

assign add_ln21_fu_927_p2 = (j_reg_255 + 6'd4);

assign add_ln25_1_fu_540_p2 = (k_2_reg_291 + 10'd2);

assign add_ln25_2_fu_674_p2 = (k_3_reg_315 + 10'd2);

assign add_ln25_3_fu_808_p2 = (k_4_reg_339 + 10'd2);

assign add_ln25_fu_389_p2 = (k_reg_267 + 10'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign icmp_ln25_1_fu_534_p2 = ((k_2_reg_291 < 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln25_2_fu_668_p2 = ((k_3_reg_315 < 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln25_3_fu_802_p2 = ((k_4_reg_339 < 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_383_p2 = ((k_reg_267 < 10'd768) ? 1'b1 : 1'b0);

assign k_2_cast4_fu_546_p1 = k_2_reg_291;

assign k_3_cast5_fu_680_p1 = k_3_reg_315;

assign k_4_cast6_fu_814_p1 = k_4_reg_339;

assign k_cast3_fu_395_p1 = k_reg_267;

assign lhs_80_fu_464_p3 = {{sum_V_17_reg_278}, {24'd0}};

assign lhs_81_fu_501_p3 = {{tmp_74_fu_491_p4}, {24'd0}};

assign lhs_83_fu_598_p3 = {{sum_V_18_reg_302}, {24'd0}};

assign lhs_84_fu_635_p3 = {{tmp_77_fu_625_p4}, {24'd0}};

assign lhs_86_fu_732_p3 = {{sum_V_19_reg_326}, {24'd0}};

assign lhs_87_fu_769_p3 = {{tmp_80_fu_759_p4}, {24'd0}};

assign lhs_89_fu_866_p3 = {{sum_V_20_reg_350}, {24'd0}};

assign lhs_90_fu_903_p3 = {{tmp_83_fu_893_p4}, {24'd0}};

assign or_ln21_1_fu_659_p2 = (trunc_ln21_reg_947 | 5'd2);

assign or_ln21_2_fu_793_p2 = (trunc_ln21_reg_947 | 5'd3);

assign or_ln21_fu_525_p2 = (trunc_ln21_reg_947 | 5'd1);

assign or_ln25_1_fu_563_p2 = (k_2_reg_291 | 10'd1);

assign or_ln25_2_fu_697_p2 = (k_3_reg_315 | 10'd1);

assign or_ln25_3_fu_831_p2 = (k_4_reg_339 | 10'd1);

assign or_ln25_fu_423_p2 = (k_reg_267 | 10'd1);

assign ret_V_79_fu_509_p2 = (lhs_81_fu_501_p3 + r_V_105_fu_485_p2);

assign ret_V_80_fu_606_p2 = (lhs_83_fu_598_p3 + r_V_107_reg_1035);

assign ret_V_81_fu_643_p2 = (lhs_84_fu_635_p3 + r_V_109_fu_619_p2);

assign ret_V_82_fu_740_p2 = (lhs_86_fu_732_p3 + r_V_111_reg_1091);

assign ret_V_83_fu_777_p2 = (lhs_87_fu_769_p3 + r_V_113_fu_753_p2);

assign ret_V_84_fu_874_p2 = (lhs_89_fu_866_p3 + r_V_115_reg_1147);

assign ret_V_85_fu_911_p2 = (lhs_90_fu_903_p3 + r_V_117_fu_887_p2);

assign ret_V_fu_472_p2 = (lhs_80_fu_464_p3 + r_V_103_reg_979);

assign tmp_72_fu_410_p3 = {{tmp_s_fu_400_p4}, {j_reg_255}};

assign tmp_73_fu_447_p3 = {{or_ln25_reg_973}, {5'd0}};

assign tmp_74_fu_491_p4 = {{ret_V_fu_472_p2[55:24]}};

assign tmp_75_fu_551_p3 = {{k_2_reg_291}, {or_ln21_reg_999}};

assign tmp_76_fu_587_p3 = {{or_ln25_1_reg_1029}, {or_ln21_reg_999}};

assign tmp_77_fu_625_p4 = {{ret_V_80_fu_606_p2[55:24]}};

assign tmp_78_fu_685_p3 = {{k_3_reg_315}, {or_ln21_1_reg_1055}};

assign tmp_79_fu_721_p3 = {{or_ln25_2_reg_1085}, {or_ln21_1_reg_1055}};

assign tmp_80_fu_759_p4 = {{ret_V_82_fu_740_p2[55:24]}};

assign tmp_81_fu_819_p3 = {{k_4_reg_339}, {or_ln21_2_reg_1111}};

assign tmp_82_fu_855_p3 = {{or_ln25_3_reg_1141}, {or_ln21_2_reg_1111}};

assign tmp_83_fu_893_p4 = {{ret_V_84_fu_874_p2[55:24]}};

assign tmp_fu_363_p3 = j_reg_255[32'd5];

assign tmp_s_fu_400_p4 = {{k_reg_267[9:1]}};

assign trunc_ln21_fu_379_p1 = j_reg_255[4:0];

assign zext_ln1118_10_fu_861_p1 = tmp_82_fu_855_p3;

assign zext_ln1118_4_fu_459_p1 = add_ln1118_fu_454_p2;

assign zext_ln1118_5_fu_558_p1 = tmp_75_fu_551_p3;

assign zext_ln1118_6_fu_593_p1 = tmp_76_fu_587_p3;

assign zext_ln1118_7_fu_692_p1 = tmp_78_fu_685_p3;

assign zext_ln1118_8_fu_727_p1 = tmp_79_fu_721_p3;

assign zext_ln1118_9_fu_826_p1 = tmp_81_fu_819_p3;

assign zext_ln1118_fu_418_p1 = tmp_72_fu_410_p3;

assign zext_ln21_1_fu_375_p1 = j_reg_255;

assign zext_ln21_fu_371_p1 = j_reg_255;

assign zext_ln23_1_fu_583_p1 = or_ln25_1_reg_1029;

assign zext_ln23_2_fu_717_p1 = or_ln25_2_reg_1085;

assign zext_ln23_3_fu_851_p1 = or_ln25_3_reg_1141;

assign zext_ln23_fu_443_p1 = or_ln25_reg_973;

assign zext_ln25_1_fu_664_p1 = or_ln21_1_fu_659_p2;

assign zext_ln25_2_fu_798_p1 = or_ln21_2_fu_793_p2;

assign zext_ln25_fu_530_p1 = or_ln21_fu_525_p2;

always @ (posedge ap_clk) begin
    zext_ln21_reg_937[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln21_1_reg_942[14:6] <= 9'b000000000;
    or_ln25_reg_973[0] <= 1'b1;
    or_ln21_reg_999[0] <= 1'b1;
    zext_ln25_reg_1005[0] <= 1'b1;
    zext_ln25_reg_1005[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    or_ln25_1_reg_1029[0] <= 1'b1;
    or_ln21_1_reg_1055[1] <= 1'b1;
    zext_ln25_1_reg_1061[1] <= 1'b1;
    zext_ln25_1_reg_1061[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    or_ln25_2_reg_1085[0] <= 1'b1;
    or_ln21_2_reg_1111[1:0] <= 2'b11;
    zext_ln25_2_reg_1117[1:0] <= 2'b11;
    zext_ln25_2_reg_1117[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    or_ln25_3_reg_1141[0] <= 1'b1;
end

endmodule //nn_inference_hwmm_layer1
